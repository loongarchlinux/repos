diff --git a/configure.ac b/configure.ac
index e3779ca2..feb90500 100644
--- a/configure.ac
+++ b/configure.ac
@@ -226,7 +226,7 @@ AS_CASE([$with_flint],
 AS_IF([test "x$with_flint" != xno],
     [AC_MSG_CHECKING([whether flint headers and library are available])
      FLINT_LIBS="-lflint -lmpfr"
-     AX_CHECK_LIBRARY([FLINT], [flint/flint.h], [flint], [fmpz_poly_set_coeff_mpz],[],[],[$GMP_LIBS])
+     AX_CHECK_LIBRARY([FLINT], [flint/flint.h], [flint], [fmpz_poly_set_coeff_fmpz],[],[],[$GMP_LIBS])
      AS_IF([test x$ax_cv_have_FLINT = xyes],
        [
          CPPFLAGS="$CPPFLAGS $FLINT_CPPFLAGS"
diff --git a/source/libnormaliz/HilbertSeries.cpp b/source/libnormaliz/HilbertSeries.cpp
index f536a590..03bbac70 100644
--- a/source/libnormaliz/HilbertSeries.cpp
+++ b/source/libnormaliz/HilbertSeries.cpp
@@ -71,8 +71,12 @@ Integer permutations(const size_t& a, const size_t& b) {
 void flint_poly(fmpz_poly_t flp, const vector<mpz_class>& nmzp) {
     slong n = (slong)nmzp.size();
     fmpz_poly_fit_length(flp, n);
+    fmpz_t tmpfz;
+
     for (size_t i = 0; i < nmzp.size(); ++i) {
-        fmpz_poly_set_coeff_mpz(flp, (slong)i, nmzp[i].get_mpz_t());
+        fmpz_init_set_readonly(tmpfz, nmzp[i].get_mpz_t());
+        fmpz_poly_set_coeff_fmpz(flp, (slong)i, tmpfz);
+        fmpz_clear_readonly(tmpfz);
     }
 }
 
@@ -82,7 +86,11 @@ void nmz_poly(vector<mpz_class>& nmzp, const fmpz_poly_t flp) {
     mpz_t c;
     mpz_init(c);
     for (size_t i = 0; i < nmzp.size(); ++i) {
-        fmpz_poly_get_coeff_mpz(c, flp, i);
+        fmpz_t fc;
+        fmpz_init(fc);
+        fmpz_poly_get_coeff_fmpz(fc, flp, i);
+        fmpz_get_mpz(c, fc);
+        fmpz_clear(fc);
         nmzp[i] = mpz_class(c);
     }
     mpz_clear(c);
diff --git a/source/libnormaliz/vector_operations.h b/source/libnormaliz/vector_operations.h
index d7b15230..65a2f37f 100644
--- a/source/libnormaliz/vector_operations.h
+++ b/source/libnormaliz/vector_operations.h
@@ -546,8 +546,11 @@ inline void vector2fmpq_poly(fmpq_poly_t flp, const std::vector<mpq_class>& poly
     slong n = (slong)poly_vector.size();
 
     fmpq_poly_fit_length(flp, n);
+    fmpq_t tmpfq;
     for (size_t i = 0; i < poly_vector.size(); ++i) {
-        fmpq_poly_set_coeff_mpq(flp, (slong)i, poly_vector[i].get_mpq_t());
+        fmpq_init_set_readonly(tmpfq, poly_vector[i].get_mpq_t());
+        fmpq_poly_set_coeff_fmpq(flp, (slong)i, tmpfq);
+        fmpq_clear_readonly(tmpfq);
     }
 }
 
@@ -561,7 +564,11 @@ inline void fmpq_poly2vector(std::vector<mpq_class>& poly_vector, const fmpq_pol
     for (slong i = 0; i < length; i++) {
         mpq_t current_coeff;
         mpq_init(current_coeff);
-        fmpq_poly_get_coeff_mpq(current_coeff, flp, (slong)i);
+        fmpq_t fcurrent_coeff;
+        fmpq_init(fcurrent_coeff);
+        fmpq_poly_get_coeff_fmpq(fcurrent_coeff, flp, (slong)i);
+        fmpq_get_mpq(current_coeff, fcurrent_coeff);
+        fmpq_clear(fcurrent_coeff);
         poly_vector[i] = mpq_class(current_coeff);
     }
 }
