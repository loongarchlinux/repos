From e0137529f8b0403972d91a2d7b0742091c357837 Mon Sep 17 00:00:00 2001
From: Leonidas Spyropoulos <artafinde@archlinux.org>
Date: Mon, 18 Dec 2023 11:56:39 +0000
Subject: [PATCH] Migrate to catch2 v3

https://github.com/catchorg/Catch2/blob/devel/docs/migrate-v2-to-v3.md#how-to-migrate-projects-from-v2-to-v3

Signed-off-by: Leonidas Spyropoulos <artafinde@archlinux.org>
---
 tests/CMakeLists.txt                     |  2 +-
 tests/src/main.cpp                       |  3 +--
 tests/src/test_amdfanauto.cpp            |  2 +-
 tests/src/test_amdfancurve.cpp           |  2 +-
 tests/src/test_amdfanfixed.cpp           |  2 +-
 tests/src/test_amdfanmode.cpp            |  2 +-
 tests/src/test_amdgpuinfopm.cpp          |  2 +-
 tests/src/test_amdgpuinfopmoverdrive.cpp |  2 +-
 tests/src/test_amdgpuinfouniqueid.cpp    |  4 ++--
 tests/src/test_amdgpuinfovbios.cpp       |  4 ++--
 tests/src/test_amdpmadvanced.cpp         |  2 +-
 tests/src/test_amdpmauto.cpp             |  2 +-
 tests/src/test_amdpmautolegacy.cpp       |  2 +-
 tests/src/test_amdpmautor600.cpp         |  2 +-
 tests/src/test_amdpmdynamicfreq.cpp      |  2 +-
 tests/src/test_amdpmfixed.cpp            |  2 +-
 tests/src/test_amdpmfixedfreq.cpp        |  2 +-
 tests/src/test_amdpmfixedlegacy.cpp      |  2 +-
 tests/src/test_amdpmfixedr600.cpp        |  2 +-
 tests/src/test_amdpmfreqmode.cpp         |  2 +-
 tests/src/test_amdpmfreqod.cpp           |  2 +-
 tests/src/test_amdpmfreqrange.cpp        |  2 +-
 tests/src/test_amdpmfreqvolt.cpp         |  2 +-
 tests/src/test_amdpmoverclock.cpp        |  2 +-
 tests/src/test_amdpmperfmode.cpp         |  2 +-
 tests/src/test_amdpmpowercap.cpp         |  2 +-
 tests/src/test_amdpmpowerprofile.cpp     |  2 +-
 tests/src/test_amdpmpowerstate.cpp       |  2 +-
 tests/src/test_amdpmvoltcurve.cpp        |  2 +-
 tests/src/test_amdpmvoltoffset.cpp       |  2 +-
 tests/src/test_amdppdpmhandler.cpp       |  2 +-
 tests/src/test_amdutils.cpp              |  2 +-
 tests/src/test_commandqueue.cpp          |  2 +-
 tests/src/test_commonutils.cpp           |  2 +-
 tests/src/test_control.cpp               |  2 +-
 tests/src/test_controlgroup.cpp          |  2 +-
 tests/src/test_controlmode.cpp           |  2 +-
 tests/src/test_cpu.cpp                   |  8 +++++---
 tests/src/test_cpufreq.cpp               |  2 +-
 tests/src/test_cpufreqmode.cpp           |  2 +-
 tests/src/test_cpuinfo.cpp               |  2 +-
 tests/src/test_cpuinfolscpu.cpp          | 16 +++++++--------
 tests/src/test_cpuinfoproccpuinfo.cpp    | 26 ++++++++++++------------
 tests/src/test_cpuutils.cpp              |  2 +-
 tests/src/test_gpu.cpp                   |  8 +++++---
 tests/src/test_gpuinfo.cpp               |  2 +-
 tests/src/test_gpuinfoopengl.cpp         |  6 +++---
 tests/src/test_gpuinforevision.cpp       |  4 ++--
 tests/src/test_gpuinfouevent.cpp         | 20 +++++++++---------
 tests/src/test_gpuinfovram.cpp           |  6 +++---
 tests/src/test_gpuinfovulkan.cpp         |  6 +++---
 tests/src/test_hwidtranslator.cpp        |  2 +-
 tests/src/test_mathutils.cpp             |  2 +-
 tests/src/test_noop.cpp                  |  2 +-
 tests/src/test_pmoverdrive.cpp           |  2 +-
 tests/src/test_pmpowerstatemode.cpp      |  2 +-
 tests/src/test_sensor.cpp                |  2 +-
 tests/src/test_stringutils.cpp           |  2 +-
 tests/src/test_swinfo.cpp                |  2 +-
 tests/src/test_swinfokernel.cpp          |  8 ++++----
 tests/src/test_swinfomesa.cpp            |  4 ++--
 tests/src/test_sysmodel.cpp              |  6 +++---
 62 files changed, 113 insertions(+), 110 deletions(-)

diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 870b2ea..4fd1bbd 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,4 +1,4 @@
-find_package(Catch2 2.6 QUIET)
+find_package(Catch2 3.0 QUIET)
 if(NOT Catch2_FOUND)
   message("Using bundled Catch2 library")
   list(APPEND TESTS_INCLUDE_DIRECTORIES $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/catch2>)
diff --git a/tests/src/main.cpp b/tests/src/main.cpp
index 7870121..37dacae 100644
--- a/tests/src/main.cpp
+++ b/tests/src/main.cpp
@@ -1,8 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#define CATCH_CONFIG_RUNNER
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 #include <easylogging++.h>
 
diff --git a/tests/src/test_amdfanauto.cpp b/tests/src/test_amdfanauto.cpp
index 962a13f..e38627c 100644
--- a/tests/src/test_amdfanauto.cpp
+++ b/tests/src/test_amdfanauto.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/uintdatasourcestub.h"
diff --git a/tests/src/test_amdfancurve.cpp b/tests/src/test_amdfancurve.cpp
index 7aa4721..8b43234 100644
--- a/tests/src/test_amdfancurve.cpp
+++ b/tests/src/test_amdfancurve.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdfanfixed.cpp b/tests/src/test_amdfanfixed.cpp
index cf7e002..a8e8827 100644
--- a/tests/src/test_amdfanfixed.cpp
+++ b/tests/src/test_amdfanfixed.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdfanmode.cpp b/tests/src/test_amdfanmode.cpp
index 65117d9..7f30357 100644
--- a/tests/src/test_amdfanmode.cpp
+++ b/tests/src/test_amdfanmode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/fan/fanmode.h"
 
diff --git a/tests/src/test_amdgpuinfopm.cpp b/tests/src/test_amdgpuinfopm.cpp
index 472742f..9b8b41e 100644
--- a/tests/src/test_amdgpuinfopm.cpp
+++ b/tests/src/test_amdgpuinfopm.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/stringpathdatasourcestub.h"
 #include "core/info/amd/gpuinfopm.h"
diff --git a/tests/src/test_amdgpuinfopmoverdrive.cpp b/tests/src/test_amdgpuinfopmoverdrive.cpp
index 5c44d72..033de7c 100644
--- a/tests/src/test_amdgpuinfopmoverdrive.cpp
+++ b/tests/src/test_amdgpuinfopmoverdrive.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/idatasource.h"
 #include "core/info/amd/gpuinfopmoverdrive.h"
diff --git a/tests/src/test_amdgpuinfouniqueid.cpp b/tests/src/test_amdgpuinfouniqueid.cpp
index 3aab2ce..648dd55 100644
--- a/tests/src/test_amdgpuinfouniqueid.cpp
+++ b/tests/src/test_amdgpuinfouniqueid.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2022 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/stringpathdatasourcestub.h"
@@ -24,7 +24,7 @@ TEST_CASE("GPUInfoUniqueID tests", "[AMD][Info][GPUInfo][GPUInfoUniqueID]")
 
     auto type = std::make_pair(std::string(::IGPUInfo::Keys::uniqueID),
                                std::string("SOME_UNIQUE_ID"));
-    REQUIRE_THAT(output, Catch::VectorContains(type));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(type));
   }
 }
 
diff --git a/tests/src/test_amdgpuinfovbios.cpp b/tests/src/test_amdgpuinfovbios.cpp
index 6bc98f5..5628459 100644
--- a/tests/src/test_amdgpuinfovbios.cpp
+++ b/tests/src/test_amdgpuinfovbios.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/stringpathdatasourcestub.h"
@@ -24,7 +24,7 @@ TEST_CASE("GPUInfoVbios tests", "[AMD][Info][GPUInfo][GPUInfoVbios]")
 
     auto type = std::make_pair(std::string(::AMD::GPUInfoVbios::version),
                                std::string("VERSION"));
-    REQUIRE_THAT(output, Catch::VectorContains(type));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(type));
   }
 }
 
diff --git a/tests/src/test_amdpmadvanced.cpp b/tests/src/test_amdpmadvanced.cpp
index c2a3746..55ad879 100644
--- a/tests/src/test_amdpmadvanced.cpp
+++ b/tests/src/test_amdpmadvanced.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/pm/advanced/pmadvanced.h"
 
diff --git a/tests/src/test_amdpmauto.cpp b/tests/src/test_amdpmauto.cpp
index fe531a6..2c84871 100644
--- a/tests/src/test_amdpmauto.cpp
+++ b/tests/src/test_amdpmauto.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmautolegacy.cpp b/tests/src/test_amdpmautolegacy.cpp
index 55c7766..4ac8205 100644
--- a/tests/src/test_amdpmautolegacy.cpp
+++ b/tests/src/test_amdpmautolegacy.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdpmautor600.cpp b/tests/src/test_amdpmautor600.cpp
index cd09a58..f0278ec 100644
--- a/tests/src/test_amdpmautor600.cpp
+++ b/tests/src/test_amdpmautor600.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdpmdynamicfreq.cpp b/tests/src/test_amdpmdynamicfreq.cpp
index 34dd6fa..0aff661 100644
--- a/tests/src/test_amdpmdynamicfreq.cpp
+++ b/tests/src/test_amdpmdynamicfreq.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdpmfixed.cpp b/tests/src/test_amdpmfixed.cpp
index e13d0de..08bab69 100644
--- a/tests/src/test_amdpmfixed.cpp
+++ b/tests/src/test_amdpmfixed.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmfixedfreq.cpp b/tests/src/test_amdpmfixedfreq.cpp
index b57fbd6..8534bbd 100644
--- a/tests/src/test_amdpmfixedfreq.cpp
+++ b/tests/src/test_amdpmfixedfreq.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmfixedlegacy.cpp b/tests/src/test_amdpmfixedlegacy.cpp
index cded831..c208044 100644
--- a/tests/src/test_amdpmfixedlegacy.cpp
+++ b/tests/src/test_amdpmfixedlegacy.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdpmfixedr600.cpp b/tests/src/test_amdpmfixedr600.cpp
index 8b7d4ac..21acf00 100644
--- a/tests/src/test_amdpmfixedr600.cpp
+++ b/tests/src/test_amdpmfixedr600.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdpmfreqmode.cpp b/tests/src/test_amdpmfreqmode.cpp
index 6a7de9b..eb694ad 100644
--- a/tests/src/test_amdpmfreqmode.cpp
+++ b/tests/src/test_amdpmfreqmode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/pm/advanced/freqmode/pmfreqmode.h"
 
diff --git a/tests/src/test_amdpmfreqod.cpp b/tests/src/test_amdpmfreqod.cpp
index f58fcbc..6bc88f3 100644
--- a/tests/src/test_amdpmfreqod.cpp
+++ b/tests/src/test_amdpmfreqod.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmfreqrange.cpp b/tests/src/test_amdpmfreqrange.cpp
index 6e00e11..cc91551 100644
--- a/tests/src/test_amdpmfreqrange.cpp
+++ b/tests/src/test_amdpmfreqrange.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmfreqvolt.cpp b/tests/src/test_amdpmfreqvolt.cpp
index 4a57b64..48bb269 100644
--- a/tests/src/test_amdpmfreqvolt.cpp
+++ b/tests/src/test_amdpmfreqvolt.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmoverclock.cpp b/tests/src/test_amdpmoverclock.cpp
index 80e3b0b..157dcd0 100644
--- a/tests/src/test_amdpmoverclock.cpp
+++ b/tests/src/test_amdpmoverclock.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/pm/advanced/overclock/pmoverclock.h"
 
diff --git a/tests/src/test_amdpmperfmode.cpp b/tests/src/test_amdpmperfmode.cpp
index 2232ad0..07cf975 100644
--- a/tests/src/test_amdpmperfmode.cpp
+++ b/tests/src/test_amdpmperfmode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/pm/pmperfmode.h"
 
diff --git a/tests/src/test_amdpmpowercap.cpp b/tests/src/test_amdpmpowercap.cpp
index eeb3106..92527cb 100644
--- a/tests/src/test_amdpmpowercap.cpp
+++ b/tests/src/test_amdpmpowercap.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmpowerprofile.cpp b/tests/src/test_amdpmpowerprofile.cpp
index ab3de6a..f81d52e 100644
--- a/tests/src/test_amdpmpowerprofile.cpp
+++ b/tests/src/test_amdpmpowerprofile.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmpowerstate.cpp b/tests/src/test_amdpmpowerstate.cpp
index 6089d11..096303a 100644
--- a/tests/src/test_amdpmpowerstate.cpp
+++ b/tests/src/test_amdpmpowerstate.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmvoltcurve.cpp b/tests/src/test_amdpmvoltcurve.cpp
index e02c1b2..c8254fb 100644
--- a/tests/src/test_amdpmvoltcurve.cpp
+++ b/tests/src/test_amdpmvoltcurve.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdpmvoltoffset.cpp b/tests/src/test_amdpmvoltoffset.cpp
index 6dd7757..e77e8b6 100644
--- a/tests/src/test_amdpmvoltoffset.cpp
+++ b/tests/src/test_amdpmvoltoffset.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_amdppdpmhandler.cpp b/tests/src/test_amdppdpmhandler.cpp
index f23292c..09451fe 100644
--- a/tests/src/test_amdppdpmhandler.cpp
+++ b/tests/src/test_amdppdpmhandler.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/stringdatasourcestub.h"
diff --git a/tests/src/test_amdutils.cpp b/tests/src/test_amdutils.cpp
index 5f161a8..1a1b4d0 100644
--- a/tests/src/test_amdutils.cpp
+++ b/tests/src/test_amdutils.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/amdutils.h"
 #include <units.h>
diff --git a/tests/src/test_commandqueue.cpp b/tests/src/test_commandqueue.cpp
index 568461a..bbdae7d 100644
--- a/tests/src/test_commandqueue.cpp
+++ b/tests/src/test_commandqueue.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/commandqueue.h"
 #include <QString>
diff --git a/tests/src/test_commonutils.cpp b/tests/src/test_commonutils.cpp
index 37f9ca9..bb33095 100644
--- a/tests/src/test_commonutils.cpp
+++ b/tests/src/test_commonutils.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/commonutils.h"
 #include <units.h>
diff --git a/tests/src/test_control.cpp b/tests/src/test_control.cpp
index f4ab212..e0792a8 100644
--- a/tests/src/test_control.cpp
+++ b/tests/src/test_control.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_controlgroup.cpp b/tests/src/test_controlgroup.cpp
index dfe7c91..e3d2740 100644
--- a/tests/src/test_controlgroup.cpp
+++ b/tests/src/test_controlgroup.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_controlmode.cpp b/tests/src/test_controlmode.cpp
index 4e4d230..19020b6 100644
--- a/tests/src/test_controlmode.cpp
+++ b/tests/src/test_controlmode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_cpu.cpp b/tests/src/test_cpu.cpp
index 2d92e31..cae5557 100644
--- a/tests/src/test_cpu.cpp
+++ b/tests/src/test_cpu.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
@@ -122,7 +122,8 @@ TEST_CASE("CPU tests", "[CPU]")
   {
     // 'CPU' + physical id combination seems to be good enough to differentiate
     // between system components.
-    REQUIRE_THAT(ts.key(), Catch::Contains("CPU") && Catch::Contains("0"));
+    REQUIRE_THAT(ts.key(), Catch::Matchers::ContainsSubstring("CPU") &&
+                               Catch::Matchers::ContainsSubstring("0"));
   }
 
   SECTION("Its CPU information can be retrieved")
@@ -133,7 +134,8 @@ TEST_CASE("CPU tests", "[CPU]")
   SECTION("CPU description and information can be retrieved")
   {
     auto [gpuDesc, infos] = ts.componentInfo();
-    REQUIRE_THAT(gpuDesc, Catch::Contains("CPU") && Catch::Contains("0"));
+    REQUIRE_THAT(gpuDesc, Catch::Matchers::ContainsSubstring("CPU") &&
+                              Catch::Matchers::ContainsSubstring("0"));
     REQUIRE_FALSE(infos.empty());
     auto &[infoKey, info] = infos[0];
     REQUIRE(infoKey == "info_k1");
diff --git a/tests/src/test_cpufreq.cpp b/tests/src/test_cpufreq.cpp
index 8e794ba..4ab4547 100644
--- a/tests/src/test_cpufreq.cpp
+++ b/tests/src/test_cpufreq.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
diff --git a/tests/src/test_cpufreqmode.cpp b/tests/src/test_cpufreqmode.cpp
index 5da43f6..c94013f 100644
--- a/tests/src/test_cpufreqmode.cpp
+++ b/tests/src/test_cpufreqmode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/cpu/cpufreqmode.h"
 
diff --git a/tests/src/test_cpuinfo.cpp b/tests/src/test_cpuinfo.cpp
index 9cc3a51..529d93a 100644
--- a/tests/src/test_cpuinfo.cpp
+++ b/tests/src/test_cpuinfo.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/info/cpuinfo.h"
 
diff --git a/tests/src/test_cpuinfolscpu.cpp b/tests/src/test_cpuinfolscpu.cpp
index 1aded7f..8c46510 100644
--- a/tests/src/test_cpuinfolscpu.cpp
+++ b/tests/src/test_cpuinfolscpu.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/vectorstringdatasourcestub.h"
@@ -32,7 +32,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::arch),
                                std::string("z48"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides operation mode")
@@ -45,7 +45,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::opMode),
                                std::string("48-bit"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides byte order")
@@ -59,7 +59,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::byteOrder),
                                std::string("Middle Endian"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides virtualization")
@@ -72,7 +72,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::virt),
                                std::string("zzz"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides L1d cache size")
@@ -85,7 +85,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::l1dCache),
                                std::string("320K"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides L1i cache size")
@@ -98,7 +98,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::l1iCache),
                                std::string("320K"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides L2 cache size")
@@ -111,7 +111,7 @@ TEST_CASE("CPUInfoLsCpu tests", "[Info][CPUInfo][CPUInfoLsCpu]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::CPUInfoLsCpu::Keys::l2Cache),
                                std::string("640K"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 }
 
diff --git a/tests/src/test_cpuinfoproccpuinfo.cpp b/tests/src/test_cpuinfoproccpuinfo.cpp
index 35e861d..fa51b80 100644
--- a/tests/src/test_cpuinfoproccpuinfo.cpp
+++ b/tests/src/test_cpuinfoproccpuinfo.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/vectorstringdatasourcestub.h"
@@ -32,7 +32,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::executionUnits),
                                std::string("1"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides vendor id")
@@ -45,7 +45,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::vendorId),
                                std::string("TheVendor"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides cpu family")
@@ -58,7 +58,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::cpuFamily),
                                std::string("128"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides model")
@@ -71,7 +71,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::model),
                                std::string("8"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides model name")
@@ -84,7 +84,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::modelName),
                                std::string("Potato"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides stepping")
@@ -97,7 +97,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::stepping),
                                std::string("2"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides microcode")
@@ -110,7 +110,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::ucode),
                                std::string("0x01"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides L3 cache size")
@@ -123,7 +123,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::l3Cache),
                                std::string("8192 KB"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides cores count")
@@ -136,7 +136,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::cores),
                                std::string("64"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides flags")
@@ -149,7 +149,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::flags),
                                std::string("a lot"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides bugs")
@@ -162,7 +162,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::bugs),
                                std::string("yes"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 
   SECTION("Provides bogomips")
@@ -175,7 +175,7 @@ TEST_CASE("CPUInfoProcCpuInfo tests", "[Info][CPUInfo][CPUInfoProcCpuInfo]")
     auto output = ts.provideInfo(0, {{0, 0, "/cpu0"}});
     auto data = std::make_pair(std::string(::ICPUInfo::Keys::bogomips),
                                std::string("20.45"));
-    REQUIRE_THAT(output, Catch::VectorContains(data));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(data));
   }
 }
 
diff --git a/tests/src/test_cpuutils.cpp b/tests/src/test_cpuutils.cpp
index 055a974..d94eb96 100644
--- a/tests/src/test_cpuutils.cpp
+++ b/tests/src/test_cpuutils.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/cpuutils.h"
 
diff --git a/tests/src/test_gpu.cpp b/tests/src/test_gpu.cpp
index da921ae..8f62f23 100644
--- a/tests/src/test_gpu.cpp
+++ b/tests/src/test_gpu.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
@@ -128,7 +128,8 @@ TEST_CASE("GPU tests", "[GPU]")
   {
     // 'GPU' + gpu index combination seems to be good enough to differentiate
     // between system components.
-    REQUIRE_THAT(ts.key(), Catch::Contains("GPU") && Catch::Contains("123"));
+    REQUIRE_THAT(ts.key(), Catch::Matchers::ContainsSubstring("GPU") &&
+                               Catch::Matchers::ContainsSubstring("123"));
   }
 
   SECTION("Its GPU information can be retrieved")
@@ -139,7 +140,8 @@ TEST_CASE("GPU tests", "[GPU]")
   SECTION("GPU description and information can be retrieved")
   {
     auto [gpuDesc, infos] = ts.componentInfo();
-    REQUIRE_THAT(gpuDesc, Catch::Contains("GPU") && Catch::Contains("123"));
+    REQUIRE_THAT(gpuDesc, Catch::Matchers::ContainsSubstring("GPU") &&
+                              Catch::Matchers::ContainsSubstring("123"));
     REQUIRE_FALSE(infos.empty());
     auto &[infoKey, info] = infos[0];
     REQUIRE(infoKey == "info_k1");
diff --git a/tests/src/test_gpuinfo.cpp b/tests/src/test_gpuinfo.cpp
index 3228ada..6ab4a9e 100644
--- a/tests/src/test_gpuinfo.cpp
+++ b/tests/src/test_gpuinfo.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/info/gpuinfo.h"
 #include "core/info/ihwidtranslator.h"
diff --git a/tests/src/test_gpuinfoopengl.cpp b/tests/src/test_gpuinfoopengl.cpp
index 2ad94f3..697b53e 100644
--- a/tests/src/test_gpuinfoopengl.cpp
+++ b/tests/src/test_gpuinfoopengl.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "core/idatasource.h"
@@ -59,14 +59,14 @@ Extended renderer info (GLX_MESA_query_renderer):\n\
   {
     auto coreVersion = std::make_pair(
         std::string(::GPUInfoOpenGL::Keys::coreVersion), std::string("1.1"));
-    REQUIRE_THAT(output, Catch::VectorContains(coreVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(coreVersion));
   }
 
   SECTION("Provides compat version")
   {
     auto compatVersion = std::make_pair(
         std::string(::GPUInfoOpenGL::Keys::compatVersion), std::string("2.2"));
-    REQUIRE_THAT(output, Catch::VectorContains(compatVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(compatVersion));
   }
 }
 
diff --git a/tests/src/test_gpuinforevision.cpp b/tests/src/test_gpuinforevision.cpp
index 7cb953e..22cde36 100644
--- a/tests/src/test_gpuinforevision.cpp
+++ b/tests/src/test_gpuinforevision.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/stringpathdatasourcestub.h"
@@ -26,7 +26,7 @@ TEST_CASE("GPUInfoRevision tests", "[Info][GPUInfo][GPUInfoRevision]")
 
     auto revision = std::make_pair(std::string(IGPUInfo::Keys::revision),
                                    std::string("123"));
-    REQUIRE_THAT(output, Catch::VectorContains(revision));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(revision));
   }
 }
 
diff --git a/tests/src/test_gpuinfouevent.cpp b/tests/src/test_gpuinfouevent.cpp
index 59fe895..382114a 100644
--- a/tests/src/test_gpuinfouevent.cpp
+++ b/tests/src/test_gpuinfouevent.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "core/idatasource.h"
@@ -66,7 +66,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto driver = std::make_pair(std::string(IGPUInfo::Keys::driver),
                                  std::string("driver"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(driver));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(driver));
   }
 
   SECTION("Provides PCI slot")
@@ -75,7 +75,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto driver = std::make_pair(std::string(IGPUInfo::Keys::pciSlot),
                                  std::string("0000:01:00.0"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(driver));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(driver));
   }
 
   SECTION("Provides vendor id")
@@ -84,7 +84,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto vendorID = std::make_pair(std::string(IGPUInfo::Keys::vendorID),
                                    std::string("1111"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(vendorID));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(vendorID));
   }
 
   SECTION("Provides vendor name")
@@ -94,7 +94,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto vendorName = std::make_pair(std::string(IGPUInfo::Keys::vendorName),
                                      vName);
 
-    REQUIRE_THAT(output, Catch::VectorContains(vendorName));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(vendorName));
   }
 
   SECTION("Provides device id")
@@ -103,7 +103,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto deviceID = std::make_pair(std::string(IGPUInfo::Keys::deviceID),
                                    std::string("2222"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(deviceID));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(deviceID));
   }
 
   SECTION("Provides device name")
@@ -114,7 +114,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto deviceName = std::make_pair(std::string(IGPUInfo::Keys::deviceName),
                                      dName);
 
-    REQUIRE_THAT(output, Catch::VectorContains(deviceName));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(deviceName));
   }
 
   SECTION("Provides subvendor id")
@@ -123,7 +123,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto subvendorID = std::make_pair(std::string(IGPUInfo::Keys::subvendorID),
                                       std::string("3333"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(subvendorID));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(subvendorID));
   }
 
   SECTION("Provides subdevice id")
@@ -132,7 +132,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto subdeviceID = std::make_pair(std::string(IGPUInfo::Keys::subdeviceID),
                                       std::string("4444"));
 
-    REQUIRE_THAT(output, Catch::VectorContains(subdeviceID));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(subdeviceID));
   }
 
   SECTION("Provides subdevice name")
@@ -144,7 +144,7 @@ TEST_CASE("GPUInfoUevent tests", "[Info][GPUInfo][GPUInfoUevent]")
     auto subdeviceName = std::make_pair(
         std::string(IGPUInfo::Keys::subdeviceName), sdName);
 
-    REQUIRE_THAT(output, Catch::VectorContains(subdeviceName));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(subdeviceName));
   }
 }
 
diff --git a/tests/src/test_gpuinfovram.cpp b/tests/src/test_gpuinfovram.cpp
index fc6f074..3ab62b2 100644
--- a/tests/src/test_gpuinfovram.cpp
+++ b/tests/src/test_gpuinfovram.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/hwidtranslatorstub.h"
@@ -128,7 +128,7 @@ TEST_CASE("GPUInfoVRam tests", "[Info][GPUInfo][GPUInfoVRam]")
         auto memory = std::make_pair(std::string(::IGPUInfo::Keys::memory),
                                      std::string("8 MB"));
 
-        REQUIRE_THAT(output, Catch::VectorContains(memory));
+        REQUIRE_THAT(output, Catch::Matchers::VectorContains(memory));
       }
 
       SECTION("Does not provide vram size when kernel < 2.6.31")
@@ -187,7 +187,7 @@ TEST_CASE("GPUInfoVRam tests", "[Info][GPUInfo][GPUInfoVRam]")
         auto memory = std::make_pair(std::string(::IGPUInfo::Keys::memory),
                                      std::string("16 MB"));
 
-        REQUIRE_THAT(output, Catch::VectorContains(memory));
+        REQUIRE_THAT(output, Catch::Matchers::VectorContains(memory));
       }
 
       SECTION("Does not provide vram size when kernel < 4.10")
diff --git a/tests/src/test_gpuinfovulkan.cpp b/tests/src/test_gpuinfovulkan.cpp
index 3965fd8..4ec292e 100644
--- a/tests/src/test_gpuinfovulkan.cpp
+++ b/tests/src/test_gpuinfovulkan.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/hwidtranslatorstub.h"
 #include "common/stringdatasourcestub.h"
@@ -33,7 +33,7 @@ VkPhysicalDeviceProperties:\n\
 
     auto apiVersion = std::make_pair(
         std::string(::GPUInfoVulkan::Keys::apiVersion), std::string("4194306"));
-    REQUIRE_THAT(output, Catch::VectorContains(apiVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(apiVersion));
   }
 
   SECTION("Provides api version (v2)")
@@ -53,7 +53,7 @@ VkPhysicalDeviceProperties:\n\
 
     auto apiVersion = std::make_pair(
         std::string(::GPUInfoVulkan::Keys::apiVersion), std::string("1.1.70"));
-    REQUIRE_THAT(output, Catch::VectorContains(apiVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(apiVersion));
   }
 }
 
diff --git a/tests/src/test_hwidtranslator.cpp b/tests/src/test_hwidtranslator.cpp
index 2b94e72..34ad54e 100644
--- a/tests/src/test_hwidtranslator.cpp
+++ b/tests/src/test_hwidtranslator.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/idatasource.h"
 #include "core/info/hwidtranslator.h"
diff --git a/tests/src/test_mathutils.cpp b/tests/src/test_mathutils.cpp
index 3334a93..11793cf 100644
--- a/tests/src/test_mathutils.cpp
+++ b/tests/src/test_mathutils.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/mathutils.h"
 #include <units.h>
diff --git a/tests/src/test_noop.cpp b/tests/src/test_noop.cpp
index b590eee..bab9136 100644
--- a/tests/src/test_noop.cpp
+++ b/tests/src/test_noop.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "core/components/controls/noop.h"
diff --git a/tests/src/test_pmoverdrive.cpp b/tests/src/test_pmoverdrive.cpp
index 916b1f0..e864839 100644
--- a/tests/src/test_pmoverdrive.cpp
+++ b/tests/src/test_pmoverdrive.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/commandqueuestub.h"
 #include "common/controlmock.h"
diff --git a/tests/src/test_pmpowerstatemode.cpp b/tests/src/test_pmpowerstatemode.cpp
index 4d4d244..7ad577b 100644
--- a/tests/src/test_pmpowerstatemode.cpp
+++ b/tests/src/test_pmpowerstatemode.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2021 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/components/controls/amd/pm/powerstate/pmpowerstatemode.h"
 
diff --git a/tests/src/test_sensor.cpp b/tests/src/test_sensor.cpp
index 4737cb2..e1cb355 100644
--- a/tests/src/test_sensor.cpp
+++ b/tests/src/test_sensor.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "core/components/sensors/sensor.h"
diff --git a/tests/src/test_stringutils.cpp b/tests/src/test_stringutils.cpp
index 4959d9f..acfe7ec 100644
--- a/tests/src/test_stringutils.cpp
+++ b/tests/src/test_stringutils.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/stringutils.h"
diff --git a/tests/src/test_swinfo.cpp b/tests/src/test_swinfo.cpp
index c7e7a88..ac90f71 100644
--- a/tests/src/test_swinfo.cpp
+++ b/tests/src/test_swinfo.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "core/info/swinfo.h"
 
diff --git a/tests/src/test_swinfokernel.cpp b/tests/src/test_swinfokernel.cpp
index a88a7c5..92623a8 100644
--- a/tests/src/test_swinfokernel.cpp
+++ b/tests/src/test_swinfokernel.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/stringdatasourcestub.h"
 #include "core/info/common/swinfokernel.h"
@@ -20,7 +20,7 @@ TEST_CASE("SWInfoKernel tests", "[Info][SWInfo][SWInfoKernel]")
 
     auto kernelVersion = std::make_pair(
         std::string(ISWInfo::Keys::kernelVersion), std::string("1.2.3"));
-    REQUIRE_THAT(output, Catch::VectorContains(kernelVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(kernelVersion));
   }
 
   SECTION("Provides fake kernel version (0.0.0) when...")
@@ -33,7 +33,7 @@ TEST_CASE("SWInfoKernel tests", "[Info][SWInfo][SWInfoKernel]")
 
       auto kernelVersion = std::make_pair(
           std::string(ISWInfo::Keys::kernelVersion), std::string("0.0.0"));
-      REQUIRE_THAT(output, Catch::VectorContains(kernelVersion));
+      REQUIRE_THAT(output, Catch::Matchers::VectorContains(kernelVersion));
     }
 
     SECTION("/proc/version data has an unknown format")
@@ -46,7 +46,7 @@ TEST_CASE("SWInfoKernel tests", "[Info][SWInfo][SWInfoKernel]")
 
       auto kernelVersion = std::make_pair(
           std::string(ISWInfo::Keys::kernelVersion), std::string("0.0.0"));
-      REQUIRE_THAT(output, Catch::VectorContains(kernelVersion));
+      REQUIRE_THAT(output, Catch::Matchers::VectorContains(kernelVersion));
     }
   }
 }
diff --git a/tests/src/test_swinfomesa.cpp b/tests/src/test_swinfomesa.cpp
index b74ccea..d6d8db7 100644
--- a/tests/src/test_swinfomesa.cpp
+++ b/tests/src/test_swinfomesa.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 
 #include "common/stringdatasourcestub.h"
 #include "core/info/common/swinfomesa.h"
@@ -25,7 +25,7 @@ Extended renderer info (GLX_MESA_query_renderer):\n\
   {
     auto mesaVersion = std::make_pair(std::string(ISWInfo::Keys::mesaVersion),
                                       std::string("1.2.3"));
-    REQUIRE_THAT(output, Catch::VectorContains(mesaVersion));
+    REQUIRE_THAT(output, Catch::Matchers::VectorContains(mesaVersion));
   }
 }
 
diff --git a/tests/src/test_sysmodel.cpp b/tests/src/test_sysmodel.cpp
index 23dea97..c535d2c 100644
--- a/tests/src/test_sysmodel.cpp
+++ b/tests/src/test_sysmodel.cpp
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // Copyright 2019 Juan Palacios <jpalaciosdev@gmail.com>
 
-#include <catch2/catch.hpp>
+#include <catch2/catch_all.hpp>
 #include <catch2/trompeloeil.hpp>
 
 #include "common/commandqueuestub.h"
@@ -143,14 +143,14 @@ TEST_CASE("SysModel tests", "[SysModel]")
       auto swInfo = std::make_pair(std::string("Software"),
                                    std::move(swInfoData));
 
-      REQUIRE_THAT(sysInfo, Catch::VectorContains(swInfo));
+      REQUIRE_THAT(sysInfo, Catch::Matchers::VectorContains(swInfo));
     }
 
     SECTION("Has components info")
     {
       auto compInfo = componentMock.componentInfo();
 
-      REQUIRE_THAT(sysInfo, Catch::VectorContains(compInfo));
+      REQUIRE_THAT(sysInfo, Catch::Matchers::VectorContains(compInfo));
     }
   }
 
-- 
2.43.0

