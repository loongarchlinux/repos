From e89e65dc17020772eb057414b4f0c5d6f4ad98d0 Mon Sep 17 00:00:00 2001
From: Nicolas Werner <nicolas.werner@hotmail.de>
Date: Wed, 28 Jun 2023 13:16:10 +0200
Subject: [PATCH] Fix build against fmt10

fixes #1499
---
 src/Cache.cpp                             |  2 +-
 src/encryption/DeviceVerificationFlow.cpp |  2 +-
 src/timeline/InputBar.cpp                 | 10 ++++++----
 src/ui/MxcMediaProxy.cpp                  |  9 ++++++---
 4 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/src/Cache.cpp b/src/Cache.cpp
index f4aad6b3a..7a19cba4d 100644
--- a/src/Cache.cpp
+++ b/src/Cache.cpp
@@ -434,7 +434,7 @@ Cache::loadSecretsFromStore(
                 if (job->error() && job->error() != QKeychain::Error::EntryNotFound) {
                     nhlog::db()->error("Restoring secret '{}' failed ({}): {}",
                                        name.toStdString(),
-                                       job->error(),
+                                       static_cast<int>(job->error()),
                                        job->errorString().toStdString());
 
                     fatalSecretError();
diff --git a/src/encryption/DeviceVerificationFlow.cpp b/src/encryption/DeviceVerificationFlow.cpp
index a240a095c..1e7ed7bcc 100644
--- a/src/encryption/DeviceVerificationFlow.cpp
+++ b/src/encryption/DeviceVerificationFlow.cpp
@@ -37,7 +37,7 @@ DeviceVerificationFlow::DeviceVerificationFlow(QObject *,
   , deviceIds(std::move(deviceIds_))
   , model_(model)
 {
-    nhlog::crypto()->debug("CREATING NEW FLOW, {}, {}", flow_type, (void *)this);
+    nhlog::crypto()->debug("CREATING NEW FLOW, {}, {}", static_cast<int>(flow_type), (void *)this);
     if (deviceIds.size() == 1)
         deviceId = deviceIds.front();
 
diff --git a/src/timeline/InputBar.cpp b/src/timeline/InputBar.cpp
index 2f3b6eae8..a59bc4c61 100644
--- a/src/timeline/InputBar.cpp
+++ b/src/timeline/InputBar.cpp
@@ -948,14 +948,14 @@
                 this,
                 [mediaPlayer](QMediaPlayer::Error error) {
                     nhlog::ui()->debug("Media player error {} and errorStr {}",
-                                       error,
+                                       static_cast<int>(error),
                                        mediaPlayer->errorString().toStdString());
                 });
         connect(mediaPlayer,
                 &QMediaPlayer::mediaStatusChanged,
                 [mediaPlayer](QMediaPlayer::MediaStatus status) {
                     nhlog::ui()->debug(
-                      "Media player status {} and error {}", status, mediaPlayer->error());
+                      "Media player status {} and error {}", static_cast<int>(status), static_cast<int>(mediaPlayer->error()));
                 });
         connect(mediaPlayer,
                 qOverload<const QString &, const QVariant &>(&QMediaPlayer::metaDataChanged),
diff --git a/src/ui/MxcMediaProxy.cpp b/src/ui/MxcMediaProxy.cpp
index 2adf25387..5fae0654f 100644
--- a/src/ui/MxcMediaProxy.cpp
+++ b/src/ui/MxcMediaProxy.cpp
@@ -37,11 +37,11 @@
             qOverload<QMediaPlayer::Error>(&MxcMediaProxy::error),
             [this](QMediaPlayer::Error error) {
                 nhlog::ui()->info("Media player error {} and errorStr {}",
-                                  error,
+                                  static_cast<int>(error),
                                   this->errorString().toStdString());
             });
     connect(this, &MxcMediaProxy::mediaStatusChanged, [this](QMediaPlayer::MediaStatus status) {
-        nhlog::ui()->info("Media player status {} and error {}", status, this->error());
+        nhlog::ui()->info("Media player status {} and error {}", static_cast<int>(status), static_cast<int>(this->error()));
     });
     connect(this,
             qOverload<const QString &, const QVariant &>(&MxcMediaProxy::metaDataChanged),
-- 
GitLab

