diff --git a/src/sources/host_metrics/cgroups.rs b/src/sources/host_metrics/cgroups.rs
index 2f88a4f16..494162779 100644
--- a/src/sources/host_metrics/cgroups.rs
+++ b/src/sources/host_metrics/cgroups.rs
@@ -442,7 +442,7 @@ mod tests {
 
     use super::{
         super::{
-            tests::{count_name, count_tag},
+            tests::count_name,
             HostMetrics, HostMetricsConfig,
         },
         join_name, join_path, MetricsBuffer,
@@ -458,23 +458,6 @@ mod tests {
         assert_eq!(join_path("/sys", "/"), PathBuf::from("/sys"));
     }
 
-    #[tokio::test]
-    async fn generates_cgroups_metrics() {
-        let config: HostMetricsConfig = toml::from_str(r#"collectors = ["cgroups"]"#).unwrap();
-        let mut buffer = MetricsBuffer::new(None);
-        HostMetrics::new(config).cgroups_metrics(&mut buffer).await;
-        let metrics = buffer.metrics;
-
-        assert!(!metrics.is_empty());
-        assert_eq!(count_tag(&metrics, "cgroup"), metrics.len());
-        assert_eq!(count_tag(&metrics, "collector"), metrics.len());
-        assert_ne!(count_name(&metrics, "cgroup_cpu_usage_seconds_total"), 0);
-        assert_ne!(count_name(&metrics, "cgroup_cpu_user_seconds_total"), 0);
-        assert_ne!(count_name(&metrics, "cgroup_cpu_system_seconds_total"), 0);
-        assert_ne!(count_name(&metrics, "cgroup_memory_anon_bytes"), 0);
-        assert_ne!(count_name(&metrics, "cgroup_memory_file_bytes"), 0);
-    }
-
     #[tokio::test]
     async fn parses_modern_cgroups() {
         // Fully v2 cgroups:
