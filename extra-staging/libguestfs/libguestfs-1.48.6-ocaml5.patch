unchanged:
--- a/daemon/chroot.ml
+++ b/daemon/chroot.ml
@@ -51,7 +51,7 @@ let f t func arg =
     try
       let chan = out_channel_of_descr wfd in
       output_value chan ret;
-      Pervasives.flush chan;
+      Stdlib.flush chan;
       Exit._exit 0
     with
       exn ->
unchanged:
--- a/generator/pr.ml
+++ b/generator/pr.ml
@@ -25,7 +25,7 @@ open Std_utils
 open Utils
 
 (* Output channel, 'pr' prints to this. *)
-let chan = ref Pervasives.stdout
+let chan = ref Stdlib.stdout
 
 (* Number of lines generated. *)
 let lines = ref 0
@@ -53,7 +53,7 @@ let output_to ?(perm = 0o444) filename k =
   chan := open_out filename_new;
   k ();
   close_out !chan;
-  chan := Pervasives.stdout;
+  chan := Stdlib.stdout;
 
   (* Is the new file different from the current file? *)
   if Sys.file_exists filename && files_equal filename filename_new then
unchanged:
--- a/common/mlstdutils/std_utils.ml
+++ b/common/mlstdutils/std_utils.ml
@@ -341,12 +341,12 @@ module List = struct
       | x::xs, y::ys, z::zs -> (x, y, z) :: combine3 xs ys zs
       | _ -> invalid_arg "combine3"
 
-    let rec assoc_lbl ?(cmp = Pervasives.compare) ~default x = function
+    let rec assoc_lbl ?(cmp = Stdlib.compare) ~default x = function
       | [] -> default
       | (y, y') :: _ when cmp x y = 0 -> y'
       | _ :: ys -> assoc_lbl ~cmp ~default x ys
 
-    let uniq ?(cmp = Pervasives.compare) xs =
+    let uniq ?(cmp = Stdlib.compare) xs =
       let rec loop acc = function
         | [] -> acc
         | [x] -> x :: acc
unchanged:
--- a/ocaml/t/guestfs_065_implicit_close.ml
+++ b/ocaml/t/guestfs_065_implicit_close.ml
@@ -30,8 +30,8 @@ let () =
  *)
 
 (* This should cause the GC to close the handle. *)
-let () = Gc.compact ()
+let () = Gc.full_major ()
 
 let () = assert  (!close_invoked = 1)
 
-let () = Gc.compact ()
+let () = Gc.full_major ()
unchanged:
--- a/ocaml/guestfs-c.c
+++ b/ocaml/guestfs-c.c
@@ -395,12 +395,16 @@ event_callback_wrapper (guestfs_h *g,
   /* Ensure we are holding the GC lock before any GC operations are
    * possible. (RHBZ#725824)
    */
-  caml_leave_blocking_section ();
+  bool in_blocking_section = (caml_state == NULL);
+
+  if (in_blocking_section)
+    caml_leave_blocking_section ();
 
   event_callback_wrapper_locked (g, data, event, event_handle, flags,
                                  buf, buf_len, array, array_len);
 
-  caml_enter_blocking_section ();
+  if (in_blocking_section)
+    caml_enter_blocking_section ();
 }
 
 value
only in patch2:
unchanged:
--- a/daemon/Makefile.am
+++ b/daemon/Makefile.am
@@ -376,9 +376,11 @@ OCAML_LIBS = \
 	-lmlstdutils \
 	-lmlaugeas \
 	-lmlhivex \
-	-lcamlstr \
-	-lunix \
-	-l$(CAMLRUN) -ldl -lm
+	-l$(CAMLSTR) \
+	-l$(CAMLUNIX) \
+	-l$(CAMLRUN) \
+	$(LIBZSTD_LIBS) \
+	-ldl -lm
 
 CLEANFILES += camldaemon.o
 
only in patch2:
unchanged:
--- a/m4/guestfs-libraries.m4
+++ b/m4/guestfs-libraries.m4
@@ -248,6 +248,9 @@ PKG_CHECK_MODULES([PCRE2], [libpcre2-8], [], [
     PCRE_LIBS=`$PCRE2_CONFIG --libs8`
 ])
 
+dnl Check for zstd (required since OCaml 5.1)
+PKG_CHECK_MODULES([LIBZSTD], [libzstd])
+
 dnl Check for Augeas >= 1.2.0 (required).
 PKG_CHECK_MODULES([AUGEAS],[augeas >= 1.2.0])
 
only in patch2:
unchanged:
--- a/m4/guestfs-ocaml.m4
+++ b/m4/guestfs-ocaml.m4
@@ -122,6 +122,47 @@ if test "x$enable_daemon" = "xyes"; then
         AC_MSG_ERROR([could not find or link to libasmrun or libcamlrun])
     fi
     AC_SUBST([CAMLRUN])
+
+    dnl OCaml 5.1 changed -lcamlstr to -lcamlstrnat / -lcamlstrbyt
+    dnl and -lunix to -lunixnat / -lunixbyt so we need to detect
+    dnl the new or old libraries.  As above we cannot use AC_CHECK_LIB.
+    AC_MSG_CHECKING([how to link the daemon with -lcamlstr*])
+    if test "x$OCAMLOPT" != "xno"; then
+        choices="camlstrnat camlstr"
+    else
+        choices="camlstrbyt camlstr"
+    fi
+    for f in $choices; do
+        if test -f "$OCAMLLIB/lib$f.a"; then
+            CAMLSTR=$f
+            break
+        fi
+    done
+    if test "x$CAMLSTR" != "x"; then
+        AC_MSG_RESULT([$CAMLSTR])
+    else
+        AC_MSG_ERROR([could not find or link to -lcamlstr*])
+    fi
+    AC_SUBST([CAMLSTR])
+
+    AC_MSG_CHECKING([how to link the daemon with -lunix*])
+    if test "x$OCAMLOPT" != "xno"; then
+        choices="unixnat unix"
+    else
+        choices="unixbyt unix"
+    fi
+    for f in $choices; do
+        if test -f "$OCAMLLIB/lib$f.a"; then
+            CAMLUNIX=$f
+            break
+        fi
+    done
+    if test "x$CAMLUNIX" != "x"; then
+        AC_MSG_RESULT([$CAMLUNIX])
+    else
+        AC_MSG_ERROR([could not find or link to -lunix*])
+    fi
+    AC_SUBST([CAMLUNIX])
 fi
 
 dnl Define HIVEX_OPEN_UNSAFE_FLAG based on test above.
