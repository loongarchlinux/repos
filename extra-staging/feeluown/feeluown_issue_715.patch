diff --git a/feeluown/library/models.py b/feeluown/library/models.py
index bf22b88..aa0ac41 100644
--- a/feeluown/library/models.py
+++ b/feeluown/library/models.py
@@ -126,7 +126,7 @@ class BaseModel(_BaseModel):
         # use :meth:`cache_set` explicitly.
         extra = 'forbid'
 
-    __cache__: dict = PrivateAttr(default_factory=dict)
+    _cache: dict = PrivateAttr(default_factory=dict)
     meta: Any = ModelMeta.create()
 
     identifier: str
@@ -138,8 +138,8 @@ class BaseModel(_BaseModel):
     exists: ModelExistence = ModelExistence.unknown
 
     def cache_get(self, key) -> Tuple[Any, bool]:
-        if key in self.__cache__:
-            value, expired_at = self.__cache__[key]
+        if key in self._cache:
+            value, expired_at = self._cache[key]
             if expired_at is None or expired_at >= int(time.time()):
                 return value, True
         return None, False
@@ -152,7 +152,7 @@ class BaseModel(_BaseModel):
             expired_at = None
         else:
             expired_at = int(time.time()) + ttl
-        self.__cache__[key] = (value, expired_at)
+        self._cache[key] = (value, expired_at)
 
     """
     Implement __hash__ and __eq__ so that a model can be a dict key.
diff --git a/feeluown/models/models.py b/feeluown/models/models.py
index be7f203..4f85e73 100644
--- a/feeluown/models/models.py
+++ b/feeluown/models/models.py
@@ -29,13 +29,13 @@ class BaseModel(Model):
         model_type = ModelType.dummy.value
 
         #: declare model fields, each model must have an identifier field
-        fields = ['identifier', '__cache__']
+        fields = ['identifier', '_cache']
 
         #: Model 用来展示的字段
         fields_display = []
 
         #: 不触发 get 的 Model 字段，这些字段往往 get 是获取不到的
-        fields_no_get = ['identifier', '__cache__']
+        fields_no_get = ['identifier', '_cache']
 
     def __eq__(self, other):
         if not isinstance(other, BaseModel):
@@ -54,8 +54,8 @@ class BaseModel(Model):
 
     def cache_get(self, key):
         self._init_cache()
-        if key in self.__cache__:
-            value, expired_at = self.__cache__[key]
+        if key in self._cache:
+            value, expired_at = self._cache[key]
             if expired_at is None or expired_at >= int(time.time()):
                 return value, True
         return None, False
@@ -69,12 +69,12 @@ class BaseModel(Model):
             expired_at = None
         else:
             expired_at = int(time.time()) + ttl
-        self.__cache__[key] = (value, expired_at)
+        self._cache[key] = (value, expired_at)
 
     def _init_cache(self):
         # not thread safe
-        if self.__cache__ is None:
-            self.__cache__ = {}
+        if self._cache is None:
+            self._cache = {}
 
 
 class ArtistModel(BaseModel):
