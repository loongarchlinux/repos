diff -upr python-telegram-bot-12.2.0.orig/tests/test_constants.py python-telegram-bot-12.2.0/tests/test_constants.py
--- python-telegram-bot-12.2.0.orig/tests/test_constants.py	2019-10-14 21:12:13.000000000 +0300
+++ python-telegram-bot-12.2.0/tests/test_constants.py	2019-11-09 01:18:12.242634772 +0200
@@ -29,8 +29,7 @@ class TestConstants(object):
     def test_max_message_length(self, bot, chat_id):
         bot.send_message(chat_id=chat_id, text='a' * constants.MAX_MESSAGE_LENGTH)
 
-        with pytest.raises(BadRequest, match='Message is too long',
-                           message='MAX_MESSAGE_LENGTH is no longer valid'):
+        with pytest.raises(BadRequest, match='Message is too long'):
             bot.send_message(chat_id=chat_id, text='a' * (constants.MAX_MESSAGE_LENGTH + 1))
 
     @flaky(3, 1)
@@ -42,7 +41,6 @@ class TestConstants(object):
         assert good_msg.caption == good_caption
 
         bad_caption = good_caption + 'Z'
-        with pytest.raises(BadRequest, match="Media_caption_too_long",
-                           message='MAX_CAPTION_LENGTH is no longer valid'):
+        with pytest.raises(BadRequest, match="Media_caption_too_long"):
             with open('tests/data/telegram.png', 'rb') as f:
                 bot.send_photo(photo=f, caption=bad_caption, chat_id=chat_id)
diff -upr python-telegram-bot-12.2.0.orig/tests/test_meta.py python-telegram-bot-12.2.0/tests/test_meta.py
--- python-telegram-bot-12.2.0.orig/tests/test_meta.py	2019-10-14 21:12:13.000000000 +0300
+++ python-telegram-bot-12.2.0/tests/test_meta.py	2019-11-09 01:17:23.231591903 +0200
@@ -28,7 +28,6 @@ def call_pre_commit_hook(hook_id):
     return os.system(' '.join(['pre-commit', 'run', '--all-files', hook_id]))  # pragma: no cover
 
 
-@pytest.mark.nocoverage
 @pytest.mark.parametrize('hook_id', argvalues=('yapf', 'flake8', 'pylint'))
 @pytest.mark.skipif(not (os.getenv('TRAVIS') or os.getenv('APPVEYOR')), reason='Not running in CI')
 @pytest.mark.skipif(not sys.version_info[:2] == (3, 6) or python_implementation() != 'CPython',
@@ -38,7 +37,6 @@ def test_pre_commit_hook(hook_id):
     assert call_pre_commit_hook(hook_id) == 0  # pragma: no cover
 
 
-@pytest.mark.nocoverage
 @pytest.mark.skipif(
     not sys.version_info[:2] in ((3, 6), (2, 7)) or python_implementation() != 'CPython',
     reason='Only testing build on 2.7 and 3.6')
