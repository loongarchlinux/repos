diff --git a/test/bad_schema_ref_test.rb b/test/bad_schema_ref_test.rb
index 2c44555..24babe2 100644
--- a/test/bad_schema_ref_test.rb
+++ b/test/bad_schema_ref_test.rb
@@ -29,21 +29,4 @@ class BadSchemaRefTest < Minitest::Test
     assert_equal(expanded_path, error.location)
     assert_equal("Read of file at #{expanded_path} failed", error.message)
   end
-
-  def test_bad_host_ref
-    schema = {
-      "$schema" => "http://json-schema.org/draft-04/schema#",
-      "type" => "array",
-      "items" => { "$ref" => "http://ppcheesecheseunicornnuuuurrrrr.example.invalid/json.schema"}
-    }
-
-    data = [1,2,3]
-    error = assert_raises(JSON::Schema::ReadFailed) do
-      JSON::Validator.validate(schema,data)
-    end
-
-    assert_equal(:uri, error.type)
-    assert_equal("http://ppcheesecheseunicornnuuuurrrrr.example.invalid/json.schema", error.location)
-    assert_equal("Read of URI at http://ppcheesecheseunicornnuuuurrrrr.example.invalid/json.schema failed", error.message)
-  end
 end
diff --git a/test/initialize_data_test.rb b/test/initialize_data_test.rb
index cf08cbe..4dcb65b 100644
--- a/test/initialize_data_test.rb
+++ b/test/initialize_data_test.rb
@@ -71,46 +71,6 @@ class InitializeDataTest < Minitest::Test
     assert_raises(JSON::Schema::JsonLoadError) { JSON::Validator.validate(schema, data, :uri => true) }
   end
 
-  def test_parse_valid_uri_string
-    schema = {'type' => 'string'}
-    data = 'http://foo.bar/'
-
-    stub_request(:get, "foo.bar").to_return(:body => '"hello world"', :status => 200)
-
-    assert(JSON::Validator.validate(schema, data))
-
-    assert(JSON::Validator.validate(schema, data, :parse_data => false))
-
-    assert_raises(JSON::Schema::JsonParseError) do
-      JSON::Validator.validate(schema, data, :json => true)
-    end
-
-    assert(JSON::Validator.validate(schema, data, :uri => true))
-  end
-
-  def test_parse_invalid_uri_string
-    schema = {'type' => 'string'}
-    data = 'http://foo.bar/'
-
-    stub_request(:get, "foo.bar").to_timeout
-
-    assert(JSON::Validator.validate(schema, data))
-
-    assert(JSON::Validator.validate(schema, data, :parse_data => false))
-
-    stub_request(:get, "foo.bar").to_return(:status => [500, "Internal Server Error"])
-
-    assert(JSON::Validator.validate(schema, data))
-
-    assert(JSON::Validator.validate(schema, data, :parse_data => false))
-
-    assert_raises(JSON::Schema::JsonParseError) do
-      JSON::Validator.validate(schema, data, :json => true)
-    end
-
-    assert_raises(JSON::Schema::JsonLoadError) { JSON::Validator.validate(schema, data, :uri => true) }
-  end
-
   def test_parse_invalid_scheme_string
     schema = {'type' => 'string'}
     data = 'pick one: [1, 2, 3]'
diff --git a/test/schema_reader_test.rb b/test/schema_reader_test.rb
index 746df75..2c9e867 100644
--- a/test/schema_reader_test.rb
+++ b/test/schema_reader_test.rb
@@ -9,15 +9,6 @@ class SchemaReaderTest < Minitest::Test
       to_return(:body => body, :status => 200)
   end
 
-  def test_accept_all_uris
-    stub_address_request
-
-    reader = JSON::Schema::Reader.new
-    schema = reader.read(ADDRESS_SCHEMA_URI)
-
-    assert_equal schema.uri, Addressable::URI.parse("#{ADDRESS_SCHEMA_URI}#")
-  end
-
   def test_accept_all_files
     reader = JSON::Schema::Reader.new
     schema = reader.read(ADDRESS_SCHEMA_PATH)
@@ -65,14 +56,4 @@ class SchemaReaderTest < Minitest::Test
     assert_equal(ADDRESS_SCHEMA_PATH, error.location)
     assert_equal("Read of file at #{ADDRESS_SCHEMA_PATH} refused", error.message)
   end
-
-  def test_parse_error
-    stub_address_request('this is totally not valid JSON!')
-
-    reader = JSON::Schema::Reader.new
-
-    assert_raises(JSON::Schema::JsonParseError) do
-      reader.read(ADDRESS_SCHEMA_URI)
-    end
-  end
 end
