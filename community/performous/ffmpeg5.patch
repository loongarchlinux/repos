diff --git a/game/ffmpeg.cc b/game/ffmpeg.cc
index fc4ca441..58c3e646 100644
--- a/game/ffmpeg.cc
+++ b/game/ffmpeg.cc
@@ -82,17 +82,17 @@ FFmpeg::~FFmpeg() {
 
 void FFmpeg::open() {
 	boost::mutex::scoped_lock l(s_avcodec_mutex);
-	av_register_all();
 	av_log_set_level(AV_LOG_ERROR);
 	if (avformat_open_input(&m_formatContext, m_filename.string().c_str(), nullptr, nullptr)) throw std::runtime_error("Cannot open input file");
 	if (avformat_find_stream_info(m_formatContext, nullptr) < 0) throw std::runtime_error("Cannot find stream information");
 	m_formatContext->flags |= AVFMT_FLAG_GENPTS;
 	// Find a track and open the codec
-	AVCodec* codec = nullptr;
+	const AVCodec* codec = nullptr;
 	m_streamId = av_find_best_stream(m_formatContext, (AVMediaType)m_mediaType, -1, -1, &codec, 0);
 	if (m_streamId < 0) throw std::runtime_error("No suitable track found");
 
-	AVCodecContext* cc = m_formatContext->streams[m_streamId]->codec;
+        AVCodecContext* cc = avcodec_alloc_context3(avcodec_find_decoder(m_formatContext->streams[m_streamId]->codecpar->codec_id));
+        avcodec_parameters_to_context(cc, m_formatContext->streams[m_streamId]->codecpar);
 	if (avcodec_open2(cc, codec, nullptr) < 0) throw std::runtime_error("Cannot open codec");
 	cc->workaround_bugs = FF_BUG_AUTODETECT;
 	m_codecContext = cc;
@@ -177,7 +177,7 @@ void FFmpeg::decodePacket() {
 		ReadFramePacket(AVFormatContext* s): m_s(s) {
 			if (av_read_frame(s, this) < 0) throw FFmpeg::eof_error();
 		}
-		~ReadFramePacket() { av_free_packet(this); }
+		~ReadFramePacket() { av_packet_unref(this); }
 	};
 
 	// Read an AVPacket and decode it into AVFrames
@@ -192,16 +192,16 @@ void FFmpeg::decodePacket() {
 #else
 		boost::shared_ptr<AVFrame> frame(av_frame_alloc(), [](AVFrame* ptr) { av_frame_free(&ptr); });
 #endif
-		int frameFinished = 0;
-		int decodeSize = (m_mediaType == AVMEDIA_TYPE_VIDEO ?
-		  avcodec_decode_video2(m_codecContext, frame.get(), &frameFinished, &packet) :
-		  avcodec_decode_audio4(m_codecContext, frame.get(), &frameFinished, &packet));
+                int ret = avcodec_receive_frame(m_codecContext, frame.get());
+                if (ret < 0) return;
+                int frameFinished = (ret == 0);
+                int decodeSize = avcodec_send_packet(m_codecContext, &packet);
 		if (decodeSize < 0) return; // Packet didn't produce any output (could be waiting for B frames or something)
 		packetSize -= decodeSize; // Move forward within the packet
 		if (!frameFinished) continue;
 		// Update current position if timecode is available
-		if (frame->pkt_pts != int64_t(AV_NOPTS_VALUE)) {
-			m_position = double(frame->pkt_pts) * av_q2d(m_formatContext->streams[m_streamId]->time_base);
+		if (frame->pts != int64_t(AV_NOPTS_VALUE)) {
+			m_position = double(frame->pts) * av_q2d(m_formatContext->streams[m_streamId]->time_base);
 			if (m_formatContext->start_time != int64_t(AV_NOPTS_VALUE))
 				m_position -= double(m_formatContext->start_time) / AV_TIME_BASE;
 		}
