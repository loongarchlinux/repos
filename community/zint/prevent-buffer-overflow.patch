diff -Naur zint-2.9.1-src.orig/backend/composite.c zint-2.9.1-src/backend/composite.c
--- zint-2.9.1-src.orig/backend/composite.c	2020-08-04 15:10:16.000000000 +0200
+++ zint-2.9.1-src/backend/composite.c	2021-05-30 12:12:34.021736406 +0200
@@ -65,7 +65,7 @@
 
 INTERNAL int eanx(struct zint_symbol *symbol, unsigned char source[], int length);
 INTERNAL int ean_128(struct zint_symbol *symbol, unsigned char source[], const size_t length);
-INTERNAL void ean_leading_zeroes(struct zint_symbol *symbol, unsigned char source[], unsigned char local_source[]);
+INTERNAL int ean_leading_zeroes(struct zint_symbol *symbol, unsigned char source[], unsigned char local_source[]);
 INTERNAL int rss14(struct zint_symbol *symbol, unsigned char source[], int length);
 INTERNAL int rsslimited(struct zint_symbol *symbol, unsigned char source[], int length);
 INTERNAL int rssexpanded(struct zint_symbol *symbol, unsigned char source[], int length);
@@ -1422,7 +1422,10 @@
                 int padded_pri_len;
                 char padded_pri[20];
                 padded_pri[0] = '\0';
-                ean_leading_zeroes(symbol, (unsigned char *) symbol->primary, (unsigned char *) padded_pri);
+                if (!ean_leading_zeroes(symbol, (unsigned char *) symbol->primary, (unsigned char *) padded_pri)) {
+                    strcpy(symbol->errtxt, "448: Input wrong length in linear component");
+                    return ZINT_ERROR_TOO_LONG;
+                }
                 padded_pri_len = strlen(padded_pri);
                 if (padded_pri_len <= 7) { /* EAN-8 */
                     cc_width = 3;
diff -Naur zint-2.9.1-src.orig/backend/upcean.c zint-2.9.1-src/backend/upcean.c
--- zint-2.9.1-src.orig/backend/upcean.c	2020-08-04 15:10:16.000000000 +0200
+++ zint-2.9.1-src/backend/upcean.c	2021-05-30 12:17:31.795044601 +0200
@@ -125,7 +125,7 @@
 /* Make a UPC A barcode when we haven't been given the check digit */
 static int upca(struct zint_symbol *symbol, unsigned char source[], char dest[]) {
     int length;
-    char gtin[15];
+    char gtin[13];
 
     strcpy(gtin, (char*) source);
     length = strlen(gtin);
@@ -391,7 +391,7 @@
 static int ean13(struct zint_symbol *symbol, unsigned char source[], char dest[]) {
     unsigned int length, i, half_way;
     char parity[6];
-    char gtin[15];
+    char gtin[14];
 
     strcpy(parity, "");
     strcpy(gtin, (char*) source);
@@ -569,8 +569,8 @@
 }
 
 /* Add leading zeroes to EAN and UPC strings */
-INTERNAL void ean_leading_zeroes(struct zint_symbol *symbol, unsigned char source[], unsigned char local_source[]) {
-    unsigned char first_part[20], second_part[20], zfirst_part[20], zsecond_part[20];
+INTERNAL int ean_leading_zeroes(struct zint_symbol *symbol, unsigned char source[], unsigned char local_source[]) {
+    unsigned char first_part[14], second_part[6], zfirst_part[14], zsecond_part[6];
     int with_addon = 0;
     int first_len = 0, second_len = 0, zfirst_len = 0, zsecond_len = 0, i, h;
 
@@ -586,6 +586,9 @@
             }
         }
     }
+    if (first_len > 13 || second_len > 5) {
+        return 0;
+    }
 
     ustrcpy(first_part, (unsigned char *) "");
     ustrcpy(second_part, (unsigned char *) "");
@@ -598,9 +601,6 @@
         first_part[i + 1] = '\0';
     }
 
-    if (second_len >= 6) { /* Allow 6 (actual max 5) so as to trigger too long error */
-        second_len = 6;
-    }
     for (i = 0; i < second_len; i++) {
         second_part[i] = source[i + first_len + 1];
         second_part[i + 1] = '\0';
@@ -698,12 +698,13 @@
         strcat((char*) local_source, "+");
         strcat((char*) local_source, (char*) zsecond_part);
     }
+
+    return 1; /* Success */
 }
 
-/* splits string to parts before and after '+' parts */
 INTERNAL int eanx(struct zint_symbol *symbol, unsigned char source[], int src_len) {
-    unsigned char first_part[20] = {0}, second_part[7] = {0}, dest[1000] = {0};
-    unsigned char local_source[20] = {0};
+    unsigned char first_part[14] = {0}, second_part[6] = {0}, dest[1000] = {0};
+    unsigned char local_source[20] = {0}; /* Allow 13 + "+" + 5 + 1 */
     unsigned int latch, reader, writer, with_addon;
     int error_number, i, plus_count;
     int addon_gap = 0;
@@ -743,8 +744,11 @@
         return ZINT_ERROR_INVALID_DATA;
     }
 
-    /* Add leading zeroes */
-    ean_leading_zeroes(symbol, source, local_source);
+    /* Add leading zeroes, checking max lengths of parts */
+    if (!ean_leading_zeroes(symbol, source, local_source)) {
+        strcpy(symbol->errtxt, "294: Input too long");
+        return ZINT_ERROR_TOO_LONG;
+    }
 
     for (reader = 0; reader < ustrlen(local_source); reader++) {
         if (local_source[reader] == '+') {
