From b6245884ae83e00dd2b5261762549b37390179f8 Mon Sep 17 00:00:00 2001
From: Tristan Seligmann <mithrandi@mithrandi.net>
Date: Sun, 7 Feb 2021 13:26:59 +0200
Subject: [PATCH] Fix GHC 9 compatibility

---
 czipwith.cabal       |  4 ++--
 src/Data/CZipWith.hs | 15 +++++++++++++++
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/czipwith.cabal b/czipwith.cabal
index 116c120..d8a98a9 100644
--- a/czipwith.cabal
+++ b/czipwith.cabal
@@ -27,8 +27,8 @@ library
   -- other-modules:       
   -- other-extensions:    
   build-depends:
-    { base >=4.11 && <4.15
-    , template-haskell >=2.9 && <2.17
+    { base >=4.11 && <4.16
+    , template-haskell >=2.9 && <2.18
     }
   hs-source-dirs:      src
   default-language:    Haskell2010
diff --git a/src/Data/CZipWith.hs b/src/Data/CZipWith.hs
index dafdd8f..9993c04 100644
--- a/src/Data/CZipWith.hs
+++ b/src/Data/CZipWith.hs
@@ -223,8 +223,13 @@ deriveCPointed name = do
                 ++ show con
                 ++ ")"
       let tyvar = case _tyvarbnd of
+#if MIN_VERSION_template_haskell(2,17,0)
+            PlainTV n _    -> n
+            KindedTV n _ _ -> n
+#else
             PlainTV n    -> n
             KindedTV n _ -> n
+#endif
       let fQ   = mkName "f"
       let pats = [varP fQ]
       let
@@ -310,8 +315,13 @@ deriveCZipWith name = do
                 ++ show con
                 ++ ")"
       let tyvar = case tyvarbnd of
+#if MIN_VERSION_template_haskell(2,17,0)
+            PlainTV n _    -> n
+            KindedTV n _ _ -> n
+#else
             PlainTV n    -> n
             KindedTV n _ -> n
+#endif
       let fQ       = mkName "f"
       let indexTys = zip [1 ..] elemTys
       let indexTysVars = indexTys <&> \(i :: Int, ty) ->
@@ -403,8 +413,13 @@ deriveCZipWithM name = do
                 ++ show con
                 ++ ")"
       let tyvar = case tyvarbnd of
+#if MIN_VERSION_template_haskell(2,17,0)
+            PlainTV n _    -> n
+            KindedTV n _ _ -> n
+#else
             PlainTV n    -> n
             KindedTV n _ -> n
+#endif
       let fQ       = mkName "f"
       let indexTys = zip [1 ..] elemTys
       let indexTysVars = indexTys <&> \(i :: Int, ty) ->
